package case1;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Stack;

public class FeasibleGraphOrientation {
	
	public static void main(String args[]) {
		try {
			Scanner sc = new Scanner(new FileInputStream("Input"));
			HashMap<String, ArrayList<String>> hashMap = new HashMap<String, ArrayList<String>>();
			
			while(sc.hasNext()) {
				String line = sc.nextLine();
				String[] arr = line.split(":");
				String node = arr[0].trim();
				String[] edges = arr[1].trim().split(" ");
				
				if(hashMap.get(node) == null) {
					hashMap.put(node, new ArrayList<String>());	
				}
				
				for(int i=0; i<edges.length; i++) {
					hashMap.get(node).add(edges[i]);
				}
			}
			
			boolean isGraphStronglyConnected = true;
			
			for(Entry<String, ArrayList<String>> set : hashMap.entrySet()) {
				String node = set.getKey();
				ArrayList<String> edges = set.getValue();
			    System.out.println(set.getKey() + " = " + set.getValue());
			    
			    if (hashMap.size() != DFS(node, hashMap).length) {
					isGraphStronglyConnected = false;
					break;
				}
			}
			
			System.out.println("isGraphStronglyConnected ==> " + isGraphStronglyConnected);
			
			sc.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public static ArrayList<String> DFS(String startNode, HashMap<String, ArrayList<String>> hashMap) {
		ArrayList<String> path = new ArrayList<String>();
		ArrayList<String> visitedNodes = new ArrayList<String>();
		Stack<String> stack = new Stack<String>();
		
		visitedNodes.add(startNode);
		stack.push(startNode);
		
		while(!stack.isEmpty()) {
			String poppedNode = stack.pop();
			System.out.println(poppedNode);
			path.add(poppedNode);
			for (String adjacentNode : hashMap.get(poppedNode)) {
				if(!visitedNodes.contains(adjacentNode)) {
					visitedNodes.add(adjacentNode);
					stack.push(adjacentNode);
				}
			}
		}
		
		return path;
	}
	

}
